// Package menu contains the types for schema 'menu'.
package menu

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Item represents a row from 'menu.item'.
type Item struct {
	ID   uint64 `json:"id"`   // id
	Name string `json:"name"` // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Item exists in the database.
func (i *Item) Exists() bool {
	return i._exists
}

// Deleted provides information if the Item has been deleted from the database.
func (i *Item) Deleted() bool {
	return i._deleted
}

// Insert inserts the Item to the database.
func (i *Item) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO menu.item (` +
		`id, name` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, i.ID, i.Name)
	_, err = db.Exec(sqlstr, i.ID, i.Name)
	if err != nil {
		return err
	}

	// set existence
	i._exists = true

	return nil
}

// Update updates the Item in the database.
func (i *Item) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if i._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE menu.item SET ` +
		`name = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, i.Name, i.ID)
	_, err = db.Exec(sqlstr, i.Name, i.ID)
	return err
}

// Save saves the Item to the database.
func (i *Item) Save(db XODB) error {
	if i.Exists() {
		return i.Update(db)
	}

	return i.Insert(db)
}

// Delete deletes the Item from the database.
func (i *Item) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return nil
	}

	// if deleted, bail
	if i._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM menu.item WHERE id = ?`

	// run query
	XOLog(sqlstr, i.ID)
	_, err = db.Exec(sqlstr, i.ID)
	if err != nil {
		return err
	}

	// set deleted
	i._deleted = true

	return nil
}

// ItemByID retrieves a row from 'menu.item' as a Item.
//
// Generated from index 'id'.
func ItemByID(db XODB, id uint64) (*Item, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM menu.item ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	i := Item{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&i.ID, &i.Name)
	if err != nil {
		return nil, err
	}

	return &i, nil
}

// ItemByID retrieves a row from 'menu.item' as a Item.
//
// Generated from index 'item_id_pkey'.
func ItemByID(db XODB, id uint64) (*Item, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM menu.item ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	i := Item{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&i.ID, &i.Name)
	if err != nil {
		return nil, err
	}

	return &i, nil
}

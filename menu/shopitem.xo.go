// Package menu contains the types for schema 'menu'.
package menu

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// ShopItem represents a row from 'menu.shop_item'.
type ShopItem struct {
	ItemID int `json:"item_id"` // item_id
	ShopID int `json:"shop_id"` // shop_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopItem exists in the database.
func (si *ShopItem) Exists() bool {
	return si._exists
}

// Deleted provides information if the ShopItem has been deleted from the database.
func (si *ShopItem) Deleted() bool {
	return si._deleted
}

// Insert inserts the ShopItem to the database.
func (si *ShopItem) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if si._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO menu.shop_item (` +
		`item_id, shop_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, si.ItemID, si.ShopID)
	_, err = db.Exec(sqlstr, si.ItemID, si.ShopID)
	if err != nil {
		return err
	}

	// set existence
	si._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the ShopItem from the database.
func (si *ShopItem) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !si._exists {
		return nil
	}

	// if deleted, bail
	if si._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM menu.shop_item WHERE item_id = ? AND shop_id = ?`

	// run query
	XOLog(sqlstr, si.ItemID, si.ShopID)
	_, err = db.Exec(sqlstr, si.ItemID, si.ShopID)
	if err != nil {
		return err
	}

	// set deleted
	si._deleted = true

	return nil
}

// ShopItemByShopID retrieves a row from 'menu.shop_item' as a ShopItem.
//
// Generated from index 'shop_item_shop_id_pkey'.
func ShopItemByShopID(db XODB, shopID int) (*ShopItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`item_id, shop_id ` +
		`FROM menu.shop_item ` +
		`WHERE shop_id = ?`

	// run query
	XOLog(sqlstr, shopID)
	si := ShopItem{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, shopID).Scan(&si.ItemID, &si.ShopID)
	if err != nil {
		return nil, err
	}

	return &si, nil
}
